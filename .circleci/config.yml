version: 2.1

commands:

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      WORKFLOW_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7} # first 8 char of workflow id
    steps:
      - run:
          name: Destroy cloud formation stacks
          when: on_fail
          command: |
            # Your code here
            if aws cloudformation wait stack-exists --stack-name udapeople-frontend-<< parameters.WORKFLOW_ID >>
            then
              aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.WORKFLOW_ID >>
            fi
            if aws cloudformation wait stack-exists --stack-name udapeople-backend-<< parameters.WORKFLOW_ID >>
            then
              aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.WORKFLOW_ID >>
            fi
      - run:
          name: Destroy s3 Buckect
          when: on_fail
          command: |
            # Your code here
            if aws s3api head-bucket --bucket udapeople-<<parameters.WORKFLOW_ID>>
            then
              aws s3 rm s3://udapeople-<<parameters.WORKFLOW_ID>> --recursive
            fi

  install_ansible:
    steps:
      - run:
          name: Intall ansible
          command: |
            sudo apt update -y
            sudo apt install ansible -y


  install_aws_cli:
    steps:
      - run:
          name: Intall AWSCLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install


  revert-migrations:
    description: Revert the last migration
    parameters:
      workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7} # first 8 char of workflow id
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            #Using kvdb
            SUCCESS=$(curl --insecure  https://kvdb.io/FRNWo5FUudmTPykigCbhBi/migration_<< parameters.workflow_id >>)
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
                cd ~/project/backend
                npm install
                npm run migration:revert
            fi

  install_nodejs13:
    steps:
      - run:
          name: install nodejs 13
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash - &&\
            sudo apt-get install -y nodejs


jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      # Docker image here
      - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
       - checkout
      # Restore from cache
       - restore_cache:
          keys: [frontend-build]
      # Your job code here
       - run:
          name: test front-end
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      # Docker image here
      - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
       - checkout
      # Restore from cache
       - restore_cache:
          keys: [backend-build]
      # Your job code here
       - run:
          name: test back-end
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      # Docker image here
      - image: cimg/node:13.8.0
    steps:
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: scan front-end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            # npm audit --audit-level=critical

  scan-backend:
    docker:
      # Docker image here
      - image: cimg/node:13.8.0
    steps:
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: scan backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            #npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_aws_cli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --tags project=udapeople \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --tags project=udapeople \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt



workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]